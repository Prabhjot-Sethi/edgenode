// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2020 Intel Corporation

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/eaa/msg_broker_kafka_internal_test.go

// Package mock_eaa is a generated GoMock package.
package mock_eaa

import (
	context "context"
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaPublisher is a mock of KafkaPublisher interface
type MockKafkaPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaPublisherMockRecorder
}

// MockKafkaPublisherMockRecorder is the mock recorder for MockKafkaPublisher
type MockKafkaPublisherMockRecorder struct {
	mock *MockKafkaPublisher
}

// NewMockKafkaPublisher creates a new mock instance
func NewMockKafkaPublisher(ctrl *gomock.Controller) *MockKafkaPublisher {
	mock := &MockKafkaPublisher{ctrl: ctrl}
	mock.recorder = &MockKafkaPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaPublisher) EXPECT() *MockKafkaPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockKafkaPublisher) Publish(topic string, msgs ...*message.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{topic}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockKafkaPublisherMockRecorder) Publish(topic interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{topic}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockKafkaPublisher)(nil).Publish), varargs...)
}

// Close mocks base method
func (m *MockKafkaPublisher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockKafkaPublisherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaPublisher)(nil).Close))
}

// MockKafkaSubscriber is a mock of KafkaSubscriber interface
type MockKafkaSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaSubscriberMockRecorder
}

// MockKafkaSubscriberMockRecorder is the mock recorder for MockKafkaSubscriber
type MockKafkaSubscriberMockRecorder struct {
	mock *MockKafkaSubscriber
}

// NewMockKafkaSubscriber creates a new mock instance
func NewMockKafkaSubscriber(ctrl *gomock.Controller) *MockKafkaSubscriber {
	mock := &MockKafkaSubscriber{ctrl: ctrl}
	mock.recorder = &MockKafkaSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaSubscriber) EXPECT() *MockKafkaSubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockKafkaSubscriber) Subscribe(ctx context.Context, topic string) (<-chan *message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic)
	ret0, _ := ret[0].(<-chan *message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockKafkaSubscriberMockRecorder) Subscribe(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockKafkaSubscriber)(nil).Subscribe), ctx, topic)
}

// Close mocks base method
func (m *MockKafkaSubscriber) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockKafkaSubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaSubscriber)(nil).Close))
}
