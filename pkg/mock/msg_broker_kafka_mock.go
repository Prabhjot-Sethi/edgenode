// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2020 Intel Corporation

// Code generated by MockGen. DO NOT EDIT.
// Source: msg_broker_kafka.go

// Package mock_eaa is a generated GoMock package.
package mock_eaa

import (
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	watermill "github.com/ThreeDotsLabs/watermill"
	kafka "github.com/ThreeDotsLabs/watermill-kafka/v2/pkg/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaInterface is a mock of KafkaInterface interface
type MockKafkaInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaInterfaceMockRecorder
}

// MockKafkaInterfaceMockRecorder is the mock recorder for MockKafkaInterface
type MockKafkaInterfaceMockRecorder struct {
	mock *MockKafkaInterface
}

// NewMockKafkaInterface creates a new mock instance
func NewMockKafkaInterface(ctrl *gomock.Controller) *MockKafkaInterface {
	mock := &MockKafkaInterface{ctrl: ctrl}
	mock.recorder = &MockKafkaInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaInterface) EXPECT() *MockKafkaInterfaceMockRecorder {
	return m.recorder
}

// DefaultSaramaSubscriberConfig mocks base method
func (m *MockKafkaInterface) DefaultSaramaSubscriberConfig() *sarama.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultSaramaSubscriberConfig")
	ret0, _ := ret[0].(*sarama.Config)
	return ret0
}

// DefaultSaramaSubscriberConfig indicates an expected call of DefaultSaramaSubscriberConfig
func (mr *MockKafkaInterfaceMockRecorder) DefaultSaramaSubscriberConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultSaramaSubscriberConfig", reflect.TypeOf((*MockKafkaInterface)(nil).DefaultSaramaSubscriberConfig))
}

// DefaultSaramaSyncPublisherConfig mocks base method
func (m *MockKafkaInterface) DefaultSaramaSyncPublisherConfig() *sarama.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultSaramaSyncPublisherConfig")
	ret0, _ := ret[0].(*sarama.Config)
	return ret0
}

// DefaultSaramaSyncPublisherConfig indicates an expected call of DefaultSaramaSyncPublisherConfig
func (mr *MockKafkaInterfaceMockRecorder) DefaultSaramaSyncPublisherConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultSaramaSyncPublisherConfig", reflect.TypeOf((*MockKafkaInterface)(nil).DefaultSaramaSyncPublisherConfig))
}

// NewWithPartitioningMarshaler mocks base method
func (m *MockKafkaInterface) NewWithPartitioningMarshaler(generatePartitionKey kafka.GeneratePartitionKey) kafka.MarshalerUnmarshaler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWithPartitioningMarshaler", generatePartitionKey)
	ret0, _ := ret[0].(kafka.MarshalerUnmarshaler)
	return ret0
}

// NewWithPartitioningMarshaler indicates an expected call of NewWithPartitioningMarshaler
func (mr *MockKafkaInterfaceMockRecorder) NewWithPartitioningMarshaler(generatePartitionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWithPartitioningMarshaler", reflect.TypeOf((*MockKafkaInterface)(nil).NewWithPartitioningMarshaler), generatePartitionKey)
}

// NewPublisher mocks base method
func (m *MockKafkaInterface) NewPublisher(config kafka.PublisherConfig, logger watermill.LoggerAdapter) (*kafka.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPublisher", config, logger)
	ret0, _ := ret[0].(*kafka.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPublisher indicates an expected call of NewPublisher
func (mr *MockKafkaInterfaceMockRecorder) NewPublisher(config, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPublisher", reflect.TypeOf((*MockKafkaInterface)(nil).NewPublisher), config, logger)
}

// NewSubscriber mocks base method
func (m *MockKafkaInterface) NewSubscriber(config kafka.SubscriberConfig, logger watermill.LoggerAdapter) (*kafka.Subscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSubscriber", config, logger)
	ret0, _ := ret[0].(*kafka.Subscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSubscriber indicates an expected call of NewSubscriber
func (mr *MockKafkaInterfaceMockRecorder) NewSubscriber(config, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSubscriber", reflect.TypeOf((*MockKafkaInterface)(nil).NewSubscriber), config, logger)
}
