# Copyright 2019 Intel Corporation and Smart-Edge.com, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- hosts: localhost
  any_errors_fatal: false
  tasks:
  - debug:
      msg: "--- SETTING UP BUILD SERVER ---"
  - include_vars: ../vars/defaults.yml
  - debug:
      msg: "Base path set to: {{ base_path }}"

  #########################################################################
  # Repositories set up / fixes / config changes
  #########################################################################
  # Base setup 
  - name: Clean yum cache
    shell: yum clean all
    args:
      warn: false

  - name: Disable yum plugins
    shell: sed -i 's/^plugins=.*/plugins=0/' /etc/yum.conf
    args:
      warn: false

  - name: Download and install base EPEL package
    yum: 
      name: "{{ epel_repository_package_link }}"
      state: present     

  # RT kernel
  - name: Download Centos RT repo - GPG key
    get_url: 
      url: "{{ centos_rt_repo_gpg_file }}"
      dest: /etc/pki/rpm-gpg/
      mode: 0644

  - name: Import Centos RT repo - GPG key
    rpm_key:
      state: present
      key: "{{ centos_rt_repo_gpg_file }}"

  - name: Download Centos RT repo - repo file
    get_url:
      url: "{{ centos_rt_repo_file }}"
      dest: /etc/yum.repos.d/
      mode: 0644 

  # Docker
  - name: Download Docker repo - GPG key
    get_url: 
      url: "{{ docker_repo_gpg_file }}"
      dest: /etc/pki/rpm-gpg/
      mode: 0644
      validate_certs: false

  - name: Import Docker repo - GPG key
    rpm_key:
      state: present
      key: "{{ docker_repo_gpg_file }}"
      validate_certs: false

  - name: Download Docker repo - repo file
    get_url:
      url: "{{ docker_repo_file }}"
      dest: /etc/yum.repos.d/
      mode: 0644
      validate_certs: false

  #########################################################################
  # RT kernel setup
  #########################################################################
  - name: Install correct tuned package
    yum: 
      name: "{{ centos_rt_tuned_package_link }}"
      state: present
      allow_downgrade: yes

  - name: Install RT kernel
    yum: 
      name: "{{ centos_rt_kernel_package_name }}"
      update_cache: yes
      state: present

  - name: Check RT rpm kernel version installed
    shell: rpm -qa | grep ^kernel-rt-[345] | grep -v kvm | sed 's/kernel-rt-//'
    args:
      warn: false
    ignore_errors: true
    register: kernel_rt_version_installed
  - debug:
      msg: "...kernel RT installed: {{ kernel_rt_version_installed.stdout  }} "

  - name: Remove RT kernel old grub parameters
    shell: grubby --remove-args "{{ item.name }}" --update-kernel=/boot/vmlinuz-{{ kernel_rt_version_installed.stdout }}
    args:
      warn: false
    with_items: "{{ grub_cmdline_additional_parameters }}"

  - name: Add RT kernel grub parameters
    shell: grubby --args "{{ item.name }}{{ item.char }}{{ item.value }}" --update-kernel=/boot/vmlinuz-{{ kernel_rt_version_installed.stdout }}
    with_items: "{{ grub_cmdline_additional_parameters }}"

  - name: Get currently running kernel
    shell: uname -r
    register: kernel_rt_version_running
  - debug:
      msg: "...kernel currently running: {{ kernel_rt_version_running.stdout }} "

  - name: Check RT kernel GRUB index
    shell: "{{ base_path }}/scripts/ansible/common/tasks/rt-kernel-grub-index.sh {{ kernel_rt_version_installed.stdout }}"
    register: grub_rt_kernel_index

  - debug:
      msg: "{{ grub_rt_kernel_index.stdout }}"

  - name: Set GRUB to boot RT kernel by default
    shell: "grub2-set-default {{ grub_rt_kernel_index.stdout }}"

  - name: Stop script if no RT kernel is running
    fail:
      msg: 
        - "MANUAL ACTION NEEDED"
        - "Script has been stopped"
        - "Please reboot server now and boot it with installed RT kernel: {{ kernel_rt_version_installed }}"
        - "After reboot,re-run this script again to continue"
    when: kernel_rt_version_running.stdout != kernel_rt_version_installed.stdout

  - name: Install matching kernel development package
    yum:
      name: kernel-rt-devel
      state: present

  #########################################################################
  # OS base config
  #########################################################################
  - name: Enable IPv4 forwarding
    sysctl:
      name: net.ipv4.ip_forward
      value: 1
      sysctl_set: yes
      state: present
      reload: yes

  #########################################################################
  # Install mandatory base packages
  #########################################################################
  - name: Install user defined rpm packages for build process
    yum: 
      name: "{{ packages_to_install }}"
      state: present
      skip_broken: yes
      update_cache: yes

  #########################################################################
  # Docker setup
  #########################################################################
  - name: Reload systemd
    command: systemctl daemon-reload   

  - name: Obtain Docker service status
    service_facts:

  - name: Restart Docker service if available
    systemd:
      name: docker
      state: restarted
      force: true
    when: "'docker.service' in services"
    
  - name: Check Docker service
    shell: systemctl status docker
    ignore_errors: true
    args:
      warn: false
    register: docker_service_status

  - name: Check Docker containers running
    shell: docker ps -a -q
    register: docker_containers_running
    when: docker_service_status.rc == 0

  - name: Remove Docker containers
    shell: docker rm -f $(docker ps -a -q)
    when: 
      - docker_service_status.rc == 0
      - docker_containers_running.stdout != ""

  - name: Check Docker images
    shell: docker images -q
    register: docker_images_present
    when: docker_service_status.rc == 0
    
  - name: Remove Docker images  
    shell: docker rmi -f $(docker images -q)
    when: 
      - docker_service_status.rc == 0
      - docker_images_present.stdout != ''
    
  - name: Stop Docker service if running
    systemd:
      name: docker
      state: stopped
      force: true
    when: docker_service_status.rc == 0

  - name: Uninstall unwanted or legacy Docker packages
    yum: 
      name: "{{ docker_legacy_packages }}"
      state: absent

  - name: Install Docker CE 
    yum:
      name: "{{ docker_packages }}"
      state: present

  - name: Enable docker service and ensure it is not masked
    systemd:
      name: docker
      enabled: yes
      masked: no
      state: restarted

  - name: Install docker-compose tool
    pip:
      name: docker-compose
      state: present

  ########################################################################
  # GO lang setup
  ########################################################################
  - name: Check if go lang is already installed
    stat: 
      path: "/usr/local/go/bin/go"
    register: go_lang_presence

  - name: Download Go language package
    unarchive:
      src: "{{ go_lang_url }}"
      dest: "/usr/local/"
      remote_src: yes
    when: go_lang_presence.stat.exists == False

  - name: Add paths to go binary
    lineinfile:
      state: present
      dest: /etc/profile
      line: "{{ item }}"
    with_items:
      - "export GOROOT=/usr/local/go"
      - "export GOPATH=~/go"
      - "export PATH=/$GOPATH/bin:$GOROOT/bin:$PATH"

  ########################################################################
  # DPDK setup
  ########################################################################
  - name: Re-read shell profile file
    shell: ". /etc/profile"
    args:
      executable: /bin/bash

  - name: Remove old dpdk download and install directory
    become: true
    file:
      path: "{{ dpdk_downloaddir }}"
      state: absent
    file:
      path: "{{ dpdk_install_location }}"
      state: absent

  - name: Create dpdk download directory
    become: true
    file:
      path: "{{ dpdk_downloaddir }}"
      state: directory

  - name: Download and extract dpdk
    become: true
    unarchive:
      src: "{{ dpdk_url }}"
      dest: "{{ dpdk_downloaddir }}"
      remote_src: yes
      extra_opts: "--strip-components=1"

  - name: Compile dpdk
    become: true
    command: make install T={{ dpdk_make_target }} -j4
    args:
      chdir: "{{ dpdk_downloaddir }}"
    register: dpdk_makeinstall_output
  - debug:
      msg: "{{ dpdk_makeinstall_output }}"

  - name: Move compiled dpdk to target folder
    become: root
    shell: "mv {{ dpdk_downloaddir }} {{ dpdk_install_location }}"

  - debug:
      msg: "Script completed successfully"
