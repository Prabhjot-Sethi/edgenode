// Code generated by protoc-gen-go. DO NOT EDIT.
// source: esa.proto

package esa

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloMessage struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloMessage) Reset()         { *m = HelloMessage{} }
func (m *HelloMessage) String() string { return proto.CompactTextString(m) }
func (*HelloMessage) ProtoMessage()    {}
func (*HelloMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ec93e860f5c481, []int{0}
}

func (m *HelloMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloMessage.Unmarshal(m, b)
}
func (m *HelloMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloMessage.Marshal(b, m, deterministic)
}
func (m *HelloMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloMessage.Merge(m, src)
}
func (m *HelloMessage) XXX_Size() int {
	return xxx_messageInfo_HelloMessage.Size(m)
}
func (m *HelloMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HelloMessage proto.InternalMessageInfo

func (m *HelloMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloMessage)(nil), "sample.echosrvc.HelloMessage")
}

func init() { proto.RegisterFile("esa.proto", fileDescriptor_c0ec93e860f5c481) }

var fileDescriptor_c0ec93e860f5c481 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2d, 0x4e, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2f, 0x4e, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x4b, 0x4d,
	0xce, 0xc8, 0x2f, 0x2e, 0x2a, 0x4b, 0x56, 0x52, 0xe0, 0xe2, 0xf1, 0x48, 0xcd, 0xc9, 0xc9, 0xf7,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x8d, 0xfc, 0xb8, 0x98, 0x5d, 0x83, 0x1d, 0x85, 0xdc, 0xb9,
	0x58, 0xc1, 0x0a, 0x85, 0x64, 0xf5, 0xd0, 0xcc, 0xd0, 0x43, 0x36, 0x40, 0x0a, 0xbf, 0xb4, 0x12,
	0x83, 0x13, 0x6b, 0x14, 0x73, 0x6a, 0x71, 0x62, 0x12, 0x1b, 0xd8, 0x41, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x79, 0xa4, 0xd2, 0xe4, 0x9d, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ESAClient is the client API for ESA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ESAClient interface {
	Hello(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error)
}

type eSAClient struct {
	cc *grpc.ClientConn
}

func NewESAClient(cc *grpc.ClientConn) ESAClient {
	return &eSAClient{cc}
}

func (c *eSAClient) Hello(ctx context.Context, in *HelloMessage, opts ...grpc.CallOption) (*HelloMessage, error) {
	out := new(HelloMessage)
	err := c.cc.Invoke(ctx, "/sample.echosrvc.ESA/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ESAServer is the server API for ESA service.
type ESAServer interface {
	Hello(context.Context, *HelloMessage) (*HelloMessage, error)
}

func RegisterESAServer(s *grpc.Server, srv ESAServer) {
	s.RegisterService(&_ESA_serviceDesc, srv)
}

func _ESA_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESAServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.echosrvc.ESA/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESAServer).Hello(ctx, req.(*HelloMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ESA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample.echosrvc.ESA",
	HandlerType: (*ESAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _ESA_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "esa.proto",
}
